// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  formatGeneratedCode = "prettier"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Simplified Models ---
// --- Models based on the GraphQL Schema ---

model Survey {
  id               Int      @id @default(autoincrement()) // Or use CUID/UUID if preferred: @id @default(cuid())
  name             String
  schema_version   String? // Corresponds to '_v'
  created_at       DateTime @default(now()) // Corresponds to '_d'
  config_version   Int // Corresponds to 'version'
  use_s2           Boolean // Corresponds to 'useS2'
  default_language String // Corresponds to 'defaultLanguage'
  // theme_id Int? // Omitted as Themes model is not defined

  // Relations
  settings     SurveySetting[]
  languages    SurveyLanguage[]
  blocks       Block[]
  // Relation to generic translations table
  translations Translation[]    @relation("SurveyTranslations") // Named relation for clarity

  @@map("Surveys") // Maps to the SQL table name
}

model SurveySetting {
  survey_id     Int
  setting_key   String
  setting_value String?

  // Relations
  survey       Survey        @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  // Relation to generic translations table
  translations Translation[] @relation("SurveySettingTranslations")

  @@id([survey_id, setting_key]) // Composite primary key
  @@map("SurveySettings")
}

model SurveyLanguage {
  survey_id     Int
  language_code String

  // Relations
  survey Survey @relation(fields: [survey_id], references: [id], onDelete: Cascade)

  @@id([survey_id, language_code]) // Composite primary key
  @@map("SurveyLanguages")
}

model Block {
  id          Int     @id @default(autoincrement())
  survey_id   Int
  name        String
  order_index Int
  skip_logic  String?

  // Relations
  survey       Survey         @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  settings     BlockSetting[]
  questions    Question[]
  // Relation to generic translations table
  translations Translation[]  @relation("BlockTranslations")

  @@index([survey_id, order_index]) // Index for ordering
  @@map("Blocks")
}

model BlockSetting {
  block_id      Int
  setting_key   String
  setting_value String?

  // Relations
  block        Block         @relation(fields: [block_id], references: [id], onDelete: Cascade)
  // Relation to generic translations table
  translations Translation[] @relation("BlockSettingTranslations")

  @@id([block_id, setting_key]) // Composite primary key
  @@map("BlockSettings")
}

model Question {
  id            Int      @id @default(autoincrement())
  block_id      Int
  name          String
  type          String // e.g., 'NumericAnswer', 'RadioButton', 'HybridGrid'
  order_index   Int
  is_page_break Boolean? @default(false)

  // Relations
  block        Block             @relation(fields: [block_id], references: [id], onDelete: Cascade)
  settings     QuestionSetting[]
  choice_items ChoiceListItem[] // Relation to choices linked directly
  // Relation to generic translations table
  translations Translation[]     @relation("QuestionTranslations")
  // responses     Response[]     // Omitted as per request

  @@index([block_id, order_index]) // Index for ordering
  @@map("Questions")
}

model QuestionSetting {
  question_id   Int
  setting_key   String
  setting_value String?

  // Relations
  question     Question      @relation(fields: [question_id], references: [id], onDelete: Cascade)
  // Relation to generic translations table
  translations Translation[] @relation("QuestionSettingTranslations")

  @@id([question_id, setting_key]) // Composite primary key
  @@map("QuestionSettings")
}

model ChoiceListItem {
  id                Int      @id @default(autoincrement())
  question_id       Int // Direct link to question
  value             String // The choice value
  position          Int // Display order for choices within this specific question
  setting_visible   Boolean? @default(true)
  setting_exclusive Boolean? @default(false)

  // Relations
  question     Question      @relation(fields: [question_id], references: [id], onDelete: Cascade)
  // Relation to generic translations table
  translations Translation[] @relation("ChoiceListItemTranslations")
  // responses   Response[] // Omitted as per request

  @@index([question_id, position]) // Index for ordering/lookup
  @@map("ChoiceListItems")
}

// Generic table for all translated texts
model Translation {
  id              Int    @id @default(autoincrement())
  element_type    String // e.g., 'Survey', 'Question', 'ChoiceListItem', 'SurveySetting' etc.
  element_id      Int // ID of the element in its respective table
  text_key        String // e.g., 'TEXT', 'TITLE', or a setting_key
  language_code   String
  translated_text String

  // Explicit relations back to parent types for polymorphism (Workaround 1 - more robust)
  // Only one of these should be non-null for a given translation record.
  survey                    Survey?          @relation("SurveyTranslations", fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId                  Int?
  surveySetting             SurveySetting?   @relation("SurveySettingTranslations", fields: [surveySettingSurveyId, surveySettingKey], references: [survey_id, setting_key], onDelete: Cascade)
  surveySettingSurveyId     Int? // Part of composite FK
  surveySettingKey          String? // Part of composite FK
  block                     Block?           @relation("BlockTranslations", fields: [blockId], references: [id], onDelete: Cascade)
  blockId                   Int?
  blockSetting              BlockSetting?    @relation("BlockSettingTranslations", fields: [blockSettingBlockId, blockSettingKey], references: [block_id, setting_key], onDelete: Cascade)
  blockSettingBlockId       Int? // Part of composite FK
  blockSettingKey           String? // Part of composite FK
  question                  Question?        @relation("QuestionTranslations", fields: [questionId], references: [id], onDelete: Cascade)
  questionId                Int?
  questionSetting           QuestionSetting? @relation("QuestionSettingTranslations", fields: [questionSettingQuestionId, questionSettingKey], references: [question_id, setting_key], onDelete: Cascade)
  questionSettingQuestionId Int? // Part of composite FK
  questionSettingKey        String? // Part of composite FK
  choiceListItem            ChoiceListItem?  @relation("ChoiceListItemTranslations", fields: [choiceListItemId], references: [id], onDelete: Cascade)
  choiceListItemId          Int?

  @@unique([element_type, element_id, text_key, language_code]) // Ensure unique translations
  @@index([element_type, element_id]) // Index for finding translations for an element
  // Composite foreign key indices (needed for Prisma with composite FKs)
  @@index([surveySettingSurveyId, surveySettingKey])
  @@index([blockSettingBlockId, blockSettingKey])
  @@index([questionSettingQuestionId, questionSettingKey])
  @@map("Translations")
}

// --- Models omitted based on request/missing definitions ---
// model Response { ... }
// model Theme { ... }
// model ThemeSetting { ... }
// model SurveyProperty { ... } // Could be added similar to other settings tables
// model Action { ... }
// model ActionProperty { ... }
// model GridRow { ... }
// model GridColumn { ... }
// model GridRowVariableMapping { ... }
// model Variable { ... } // Concept removed in this simplified approach
