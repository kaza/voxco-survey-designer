// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}


generator pothos {
  provider = "prisma-pothos-types"
  // Optional: Specify output path if needed, default is usually fine
  // output = "./node_modules/@pothos/plugin-prisma/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Simplified Models ---
// --- Models based on the GraphQL Schema ---

model Survey {
  id               Int      @id @default(autoincrement()) // Or use CUID/UUID if preferred: @id @default(cuid())
  name             String
  schema_version   String? // Corresponds to '_v'
  created_at       DateTime @default(now()) // Corresponds to '_d'
  config_version   Int // Corresponds to 'version'
  use_s2           Boolean // Corresponds to 'useS2'
  default_language String // Corresponds to 'defaultLanguage'
  // theme_id Int? // Omitted as Themes model is not defined

  // Relations
  settings     SurveySetting[]
  languages    SurveyLanguage[]
  blocks       Block[]
  translations SurveyTranslation[] // Relation to specific survey translations

  @@map("Surveys") // Maps to the SQL table name
}

model SurveySetting {
  survey_id     Int
  setting_key   String
  setting_value String?

  // Relations
  survey       Survey        @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  @@id([survey_id, setting_key]) // Composite primary key
  @@map("SurveySettings")
}

model SurveyLanguage {
  survey_id     Int
  language_code String

  // Relations
  survey Survey @relation(fields: [survey_id], references: [id], onDelete: Cascade)

  @@id([survey_id, language_code]) // Composite primary key
  @@map("SurveyLanguages")
}

model Block {
  id          Int     @id @default(autoincrement())
  survey_id   Int
  name        String
  order_index Int
  skip_logic  String?

  // Relations
  survey       Survey         @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  settings     BlockSetting[]
  questions    Question[]
  translations BlockTranslation[] // Relation to specific block translations

  @@index([survey_id, order_index]) // Index for ordering
  @@map("Blocks")
}

model BlockSetting {
  block_id      Int
  setting_key   String
  setting_value String?

  // Relations
  block        Block         @relation(fields: [block_id], references: [id], onDelete: Cascade)
  
  @@id([block_id, setting_key]) // Composite primary key
  @@map("BlockSettings")
}

model Question {
  id            Int      @id @default(autoincrement())
  block_id      Int
  name          String
  type          String // e.g., 'NumericAnswer', 'RadioButton', 'HybridGrid'
  order_index   Int
  is_page_break Boolean? @default(false)

  // Relations
  block        Block             @relation(fields: [block_id], references: [id], onDelete: Cascade)
  settings     QuestionSetting[]
  choice_items ChoiceListItem[] // Relation to choices linked directly
  translations QuestionTranslation[] // Relation to specific question translations
  // responses     Response[]     // Omitted as per request

  @@index([block_id, order_index]) // Index for ordering
  @@map("Questions")
}

model QuestionSetting {
  question_id   Int
  setting_key   String
  setting_value String?

  // Relations
  question     Question      @relation(fields: [question_id], references: [id], onDelete: Cascade)
  
  @@id([question_id, setting_key]) // Composite primary key
  @@map("QuestionSettings")
}

model ChoiceListItem {
  id                Int      @id @default(autoincrement())
  question_id       Int // Direct link to question
  value             String // The choice value
  position          Int // Display order for choices within this specific question
  setting_visible   Boolean? @default(true)
  setting_exclusive Boolean? @default(false)

  // Relations
  question     Question      @relation(fields: [question_id], references: [id], onDelete: Cascade)
  translations ChoiceListItemTranslation[] // Relation to specific choice item translations
  // responses   Response[] // Omitted as per request

  @@index([question_id, position]) // Index for ordering/lookup
  @@map("ChoiceListItems")
}

// --- Specific Translation Tables ---

model SurveyTranslation {
  survey_id     Int
  language_code String
  name          String // Translated survey name

  // Relations
  survey Survey @relation(fields: [survey_id], references: [id], onDelete: Cascade)

  @@id([survey_id, language_code])
  @@map("SurveyTranslations")
}

model BlockTranslation {
  block_id      Int
  language_code String
  name          String // Translated block name

  // Relations
  block Block @relation(fields: [block_id], references: [id], onDelete: Cascade)

  @@id([block_id, language_code])
  @@map("BlockTranslations")
}

model QuestionTranslation {
  question_id   Int
  language_code String
  text          String // Translated question text

  // Relations
  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@id([question_id, language_code])
  @@map("QuestionTranslations")
}

model ChoiceListItemTranslation {
  choice_list_item_id Int
  language_code       String
  label               String // Translated choice label

  // Relations
  choice_list_item ChoiceListItem @relation(fields: [choice_list_item_id], references: [id], onDelete: Cascade)

  @@id([choice_list_item_id, language_code])
  @@map("ChoiceListItemTranslations")
}

// --- Models omitted based on request/missing definitions ---
// model Response { ... }
// model Theme { ... }
// model ThemeSetting { ... }
// model SurveyProperty { ... } // Could be added similar to other settings tables
// model Action { ... }
// model ActionProperty { ... }
// model GridRow { ... }
// model GridColumn { ... }
// model GridRowVariableMapping { ... }
// model Variable { ... } // Concept removed in this simplified approach
